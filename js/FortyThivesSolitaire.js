// Generated by CoffeeScript 1.9.0
(function() {
  var Card, Deck, DiscardPile, FoundationPile, GeneralHelper, Pile, StockPile, TableauPile,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window.Game = {};

  GeneralHelper = (function() {
    function GeneralHelper() {}

    GeneralHelper.prototype.shuffle = function(array) {
      var counter, index, temp;
      counter = array.length;
      while (counter > 0) {
        index = Math.floor(Math.random() * counter);
        counter--;
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
      }
      return array;
    };

    GeneralHelper.prototype.getLastElem = function(array) {
      return array.slice(-1)[0];
    };

    return GeneralHelper;

  })();

  Card = (function() {
    Card.cardId;

    Card.suit;

    Card.rank;

    Card.movable;

    function Card(_at_cardId, _at_suit, _at_rank, _at_movable) {
      this.cardId = _at_cardId;
      this.suit = _at_suit;
      this.rank = _at_rank;
      this.movable = _at_movable;
    }

    Card.prototype.printcard = function() {
      return console.log('your card is : ' + rank + ' of ' + suit);
    };

    Card.prototype.getCardId = function() {
      return this.cardId;
    };

    Card.prototype.getSuit = function() {
      return this.suit;
    };

    Card.prototype.getRank = function() {
      return this.rank;
    };

    Card.prototype.checkIsMovableOrNot = function() {
      return this.movable;
    };

    Card.prototype.makeCardMovable = function() {
      return this.movable = true;
    };

    return Card;

  })();

  Deck = (function() {
    Deck.maxNumberOfCards;

    Deck.deckCards;

    Deck.aRankCards;

    Deck.Helper;

    function Deck() {
      this.Helper = new GeneralHelper();
      this.aRankCards = [];
      this.maxNumberOfCards = 52;
      this.deckCards = this.initDeck();
    }

    Deck.prototype.initDeck = function() {
      var allCards, cardIdCounter, rankCounter, suitCounter, suits, _i, _j, _len;
      allCards = [];
      suits = ['h', 's', 'c', 'd'];
      cardIdCounter = 1;
      for (_i = 0, _len = suits.length; _i < _len; _i++) {
        suitCounter = suits[_i];
        for (rankCounter = _j = 1; _j <= 13; rankCounter = ++_j) {
          if (rankCounter === 1) {
            this.aRankCards.push(new Card(cardIdCounter, suitCounter, rankCounter, false));
          } else {
            allCards.push(new Card(cardIdCounter, suitCounter, rankCounter, false));
          }
          cardIdCounter++;
        }
      }
      return allCards;
    };

    Deck.prototype.shuffleDeck = function() {
      this.deckCards = this.Helper.shuffle(this.deckCards);
      if (!this.deckCards) {
        return false;
      }
      return true;
    };

    Deck.prototype.getNextCard = function() {
      var nextCard;
      nextCard = this.Helper.getLastElem(this.deckCards);
      this.deckCards.pop();
      return nextCard;
    };

    return Deck;

  })();

  Pile = (function() {
    Pile.maxNumberOfCards;

    Pile.circular;

    Pile.fanned;

    Pile.numberOfCards;

    Pile.Helper;

    Pile.currentPileCards = [];

    function Pile(_at_maxNumberOfCards, _at_circular, _at_numberOfCards, _at_fanned) {
      this.maxNumberOfCards = _at_maxNumberOfCards;
      this.circular = _at_circular;
      this.numberOfCards = _at_numberOfCards;
      this.fanned = _at_fanned;
      this.Helper = new GeneralHelper();
      this.currentPileCards = [];
    }

    Pile.prototype.getNumberOfCards = function() {
      return this.numberOfCards;
    };

    Pile.prototype.popCard = function() {
      if (this.currentPileCards && this.currentPileCards.pop()) {
        this.caculateTotalNumberOfCards();
        return true;
      }
    };

    Pile.prototype.pushCard = function(card) {
      var moved;
      moved = this.currentPileCards.push(card);
      if (moved) {
        this.caculateTotalNumberOfCards();
        return true;
      }
      return false;
    };

    Pile.prototype.getTopCard = function() {
      if (!this.currentPileCards) {
        false;
      }
      return this.Helper.getLastElem(this.currentPileCards);
    };

    Pile.prototype.caculateTotalNumberOfCards = function() {
      return this.numberOfCards = this.currentPileCards.length;
    };

    Pile.prototype.getNextCard = function() {
      var nextCard;
      nextCard = this.getTopCard();
      this.popCard();
      this.caculateTotalNumberOfCards();
      return nextCard;
    };

    return Pile;

  })();

  DiscardPile = (function(_super) {
    __extends(DiscardPile, _super);

    function DiscardPile(_at_maxNumberOfCards, _at_circular, _at_numberOfCards, _at_fanned, _at_currentPileCards) {
      this.maxNumberOfCards = _at_maxNumberOfCards;
      this.circular = _at_circular;
      this.numberOfCards = _at_numberOfCards;
      this.fanned = _at_fanned;
      this.currentPileCards = _at_currentPileCards != null ? _at_currentPileCards : [];
      DiscardPile.__super__.constructor.call(this, this.maxNumberOfCards, this.circular, this.numberOfCards, this.fanned);
    }

    return DiscardPile;

  })(Pile);

  FoundationPile = (function(_super) {
    __extends(FoundationPile, _super);

    FoundationPile.startLocation;

    FoundationPile.foundationPileId;

    function FoundationPile(_at_maxNumberOfCards, _at_circular, _at_numberOfCards, _at_fanned, _at_foundationPileId) {
      this.maxNumberOfCards = _at_maxNumberOfCards;
      this.circular = _at_circular;
      this.numberOfCards = _at_numberOfCards;
      this.fanned = _at_fanned;
      this.foundationPileId = _at_foundationPileId;
      FoundationPile.__super__.constructor.call(this, this.maxNumberOfCards, this.circular, this.numberOfCards, this.fanned);
      this.currentPileCards = [];
    }

    FoundationPile.prototype.getFoundationPileId = function() {
      return this.foundationPileId;
    };

    return FoundationPile;

  })(Pile);

  StockPile = (function(_super) {
    __extends(StockPile, _super);

    function StockPile() {
      StockPile.__super__.constructor.call(this, 52, false, 32, false);
    }

    return StockPile;

  })(Pile);

  TableauPile = (function(_super) {
    __extends(TableauPile, _super);

    TableauPile.tableauPileId;

    function TableauPile(_at_maxNumberOfCards, _at_circular, _at_numberOfCards, _at_fanned, _at_tableauPileId) {
      this.maxNumberOfCards = _at_maxNumberOfCards;
      this.circular = _at_circular;
      this.numberOfCards = _at_numberOfCards;
      this.fanned = _at_fanned;
      this.tableauPileId = _at_tableauPileId;
      TableauPile.__super__.constructor.call(this, this.maxNumberOfCards, this.circular, this.numberOfCards, this.fanned);
    }

    TableauPile.prototype.getTableauPileId = function() {
      return this.tableauPileId;
    };

    return TableauPile;

  })(Pile);

  Game.FortyThieves = (function() {
    FortyThieves.shuffledDeckCards;

    FortyThieves.deckPile;

    FortyThieves.foundationPiles;

    FortyThieves.stockPile;

    FortyThieves.discardPiles;

    FortyThieves.tableauPiles;

    FortyThieves.deckPileCards;

    FortyThieves.Helper;

    function FortyThieves() {
      this.Helper = new GeneralHelper();
      this.deckPile = new Deck();
      this.getShuffledDeckCards();
      this.foundationPiles = this.setFoundationPiles();
      this.tableauPiles = this.setTableauPiles();
      this.dealCards();
      this.stockPile = new StockPile();
      this.stockPile.currentPileCards = this.deckPile.deckCards;
      this.discardPiles = new DiscardPile(32, false, 0, false);
      this.getNextDiscardCard();
    }

    FortyThieves.prototype.setTableauPiles = function() {
      var counter, tableauPiles, _i;
      tableauPiles = [];
      for (counter = _i = 0; _i <= 9; counter = ++_i) {
        tableauPiles[counter] = new TableauPile(13, false, 2, true, counter);
      }
      return tableauPiles;
    };

    FortyThieves.prototype.setFoundationPiles = function() {
      var counter, foundationPiles, newCard, _i;
      foundationPiles = [];
      for (counter = _i = 0; _i <= 3; counter = ++_i) {
        foundationPiles[counter] = new FoundationPile(13, false, 0, true, counter);
        newCard = this.deckPile.aRankCards[counter];
        foundationPiles[counter].pushCard(newCard);
      }
      return foundationPiles;
    };

    FortyThieves.prototype.getShuffledDeckCards = function() {
      this.deckPile.shuffleDeck();
      return true;
    };

    FortyThieves.prototype.dealCards = function() {
      var counter, key, nextCard, _i;
      for (key in this.tableauPiles) {
        for (counter = _i = 0; _i <= 1; counter = ++_i) {
          nextCard = this.deckPile.getNextCard();
          this.tableauPiles[parseInt(key)].pushCard(nextCard);
        }
      }
      return true;
    };

    FortyThieves.prototype.getTableauPileById = function(tableauPileId) {
      var key, tableauPile, _i, _len, _ref;
      key = 0;
      _ref = this.tableauPiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tableauPile = _ref[_i];
        if (tableauPile.getTableauPileId() === parseInt(tableauPileId)) {
          return key;
        }
        key++;
      }
    };

    FortyThieves.prototype.getFoundationPileById = function(toFoundationPileId) {
      var foundationPile, key, _i, _len, _ref;
      key = 0;
      _ref = this.foundationPiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        foundationPile = _ref[_i];
        if (foundationPile.foundationPileId === parseInt(toFoundationPileId)) {
          return key;
        }
        key++;
      }
    };

    FortyThieves.prototype.moveCardToAnotherTableauPile = function(pileFromId, pileToId) {
      var cardToMove, destinationCard, pileFromKey, pileToKey;
      pileFromKey = this.getTableauPileById(pileFromId);
      pileToKey = this.getTableauPileById(pileToId);
      cardToMove = this.tableauPiles[pileFromKey].getTopCard();
      if (this.tableauPiles[pileToKey].currentPileCards.length > 0) {
        destinationCard = this.tableauPiles[pileToKey].getTopCard();
        if (this.testValidTableauMove(cardToMove, destinationCard)) {
          this.tableauPiles[pileFromKey].popCard();
          this.tableauPiles[pileToKey].pushCard(cardToMove);
          return true;
        } else {
          return false;
        }
      } else {
        this.tableauPiles[pileFromKey].popCard();
        this.tableauPiles[pileToKey].pushCard(cardToMove);
        return true;
      }
    };

    FortyThieves.prototype.moveCradFromDiscardToFoundationPile = function(pileToId) {
      var cardToMove, destinationCard, pileToKey;
      pileToKey = this.getFoundationPileById(pileToId);
      cardToMove = this.discardPiles.getTopCard();
      destinationCard = this.foundationPiles[pileToKey].getTopCard();
      if (this.testValidFoundationMove(cardToMove, destinationCard)) {
        this.discardPiles.popCard();
        this.foundationPiles[pileToKey].pushCard(cardToMove);
        if (this.discardPiles.numberOfCards < 1) {
          this.getNextDiscardCard();
        }
        return true;
      } else {
        return false;
      }
    };

    FortyThieves.prototype.moveCardFromTableauToFoundationPile = function(pileFromId, pileToId) {
      var cardToMove, destinationCard, pileFromKey, pileToKey;
      pileFromKey = this.getTableauPileById(pileFromId);
      pileToKey = this.getFoundationPileById(pileToId);
      cardToMove = this.tableauPiles[pileFromKey].getTopCard();
      destinationCard = this.foundationPiles[pileToKey].getTopCard();
      if (this.testValidFoundationMove(cardToMove, destinationCard)) {
        this.tableauPiles[pileFromKey].popCard();
        this.foundationPiles[pileToKey].pushCard(cardToMove);
        return true;
      } else {
        return false;
      }
    };

    FortyThieves.prototype.moveCradFromDiscardToTableauPile = function(pileToId) {
      var cardToMove, destinationCard, makeMove, pileToKey;
      pileToKey = this.getTableauPileById(pileToId);
      cardToMove = this.discardPiles.getTopCard();
      if (this.tableauPiles[pileToKey].currentPileCards.length > 0) {
        destinationCard = this.tableauPiles[pileToKey].getTopCard();
        if (this.testValidTableauMove(cardToMove, destinationCard)) {
          makeMove = true;
        } else {
          return false;
        }
      } else {
        makeMove = true;
      }
      if (makeMove) {
        this.discardPiles.popCard();
        this.tableauPiles[pileToKey].pushCard(cardToMove);
        if (this.discardPiles.numberOfCards < 1) {
          this.getNextDiscardCard();
        }
        return true;
      }
    };

    FortyThieves.prototype.testValidFoundationMove = function(cardToMove, destinationCard) {
      if (destinationCard.getSuit() === cardToMove.getSuit() && destinationCard.getRank() + 1 === cardToMove.getRank()) {
        return true;
      } else {
        return false;
      }
    };

    FortyThieves.prototype.testValidTableauMove = function(cardToMove, cardOntoMove) {
      if (cardOntoMove.getSuit() === cardToMove.getSuit() && cardToMove.getRank() + 1 === cardOntoMove.getRank()) {
        return true;
      } else {
        return false;
      }
    };

    FortyThieves.prototype.getNextDiscardCard = function() {
      if (parseInt(this.stockPile.getNumberOfCards()) > 0) {
        this.discardPiles.pushCard(this.stockPile.getNextCard());
        this.discardPiles.caculateTotalNumberOfCards();
        return true;
      }
      return false;
    };

    FortyThieves.prototype.checkIfGameWon = function() {
      var fPile, wonFlag, _i, _len, _ref;
      wonFlag = true;
      _ref = this.foundationPiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fPile = _ref[_i];
        if (fPile.currentPileCards.length < 13) {
          wonFlag = false;
        }
      }
      if (wonFlag) {
        alert("Congratulations ..!! You have won the game...");
        return window.location.reload();
      }
    };

    return FortyThieves;

  })();

}).call(this);
