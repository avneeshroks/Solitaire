// Generated by CoffeeScript 1.9.0
(function() {
  Game.ViewHelper = (function() {
    function ViewHelper() {}

    ViewHelper.prototype.createNewCard = function(card, dataPile) {
      var imgPath, newCard;
      imgPath = this.getCardImagePath(card);
      newCard = '<div class="card" data-pile="' + dataPile + '" style="background-image: url(' + imgPath + ')" data-cardId="' + card.cardId + '"> <div class="cardId" style="display:none">' + card.cardId + '</div> <div class="suit" style="display:none">' + card.suit + '</div> <div class="rank" style="display:none">' + card.rank + '</div> </div>';
      return newCard;
    };

    ViewHelper.prototype.getCardImagePath = function(card) {
      var path;
      path = 'img\/cards\/Cards_' + card.suit + '' + card.rank + '.png'.toString();
      return path;
    };

    ViewHelper.prototype.createStockPile = function(stockPile) {
      var newStockPile, pileCard, _i, _len, _ref;
      newStockPile = '';
      if (stockPile.currentPileCards) {
        _ref = stockPile.currentPileCards;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pileCard = _ref[_i];
          newStockPile += this.createNewCard(pileCard, 'stock-pile');
        }
      }
      return newStockPile;
    };

    ViewHelper.prototype.createDiscardPile = function(discardPile) {
      var newDiscardPile, pileCard, _i, _len, _ref;
      newDiscardPile = '';
      if (discardPile.currentPileCards) {
        _ref = discardPile.currentPileCards;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pileCard = _ref[_i];
          newDiscardPile += this.createNewCard(pileCard, 'discard-pile');
        }
      }
      return newDiscardPile;
    };

    ViewHelper.prototype.createFoundationPiles = function(foundataionPiles) {
      var fPile, newFoundataionPiles, pileCard, _i, _j, _len, _len1, _ref;
      newFoundataionPiles = '';
      for (_i = 0, _len = foundataionPiles.length; _i < _len; _i++) {
        fPile = foundataionPiles[_i];
        newFoundataionPiles += '<div class="foundationCards" data-foundation-id="' + fPile.foundationPileId + '">';
        _ref = fPile.currentPileCards;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          pileCard = _ref[_j];
          newFoundataionPiles += this.createNewCard(pileCard, 'foundation-pile');
        }
        newFoundataionPiles += '</div>';
      }
      return newFoundataionPiles;
    };

    ViewHelper.prototype.createTableauPiles = function(tableauPiles) {
      var newTableauPiles, pileCard, tPiles, _i, _j, _len, _len1, _ref;
      newTableauPiles = '';
      for (_i = 0, _len = tableauPiles.length; _i < _len; _i++) {
        tPiles = tableauPiles[_i];
        newTableauPiles += '<div class="tableauCards" data-tableau-id="' + tPiles.tableauPileId + '">';
        _ref = tPiles.currentPileCards;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          pileCard = _ref[_j];
          newTableauPiles += this.createNewCard(pileCard, 'tableau-pile');
        }
        newTableauPiles += '</div>';
      }
      return newTableauPiles;
    };

    ViewHelper.prototype.getNewDiscardCard = function(gameObject, discardContainerClass) {
      return $('.' + discardContainerClass).html(this.createDiscardPile(gameObject.discardPiles));
    };

    ViewHelper.prototype.makeCardDraggable = function(pileCards) {
      var card, selector;
      if (pileCards.length > 0) {
        card = pileCards[pileCards.length - 1];
        selector = $('[data-cardId=' + card.cardId + ']');
        selector.css('cursor', 'move');
        selector.draggable({
          revert: 'invalid',
          containment: "document",
          start: function() {
            selector.data("origPosition", selector.position());
            return selector.css('z-index', 999999);
          },
          stop: function() {
            return selector.css('z-index', 0);
          }
        });
      }
      return true;
    };

    ViewHelper.prototype.makeTableauPileCardsDraggable = function(newGame) {
      var tPiles, _i, _len, _ref, _results;
      _ref = newGame.tableauPiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tPiles = _ref[_i];
        _results.push(this.makeCardDraggable(tPiles.currentPileCards));
      }
      return _results;
    };

    ViewHelper.prototype.makeCardNonMovable = function(card) {
      $('[data-cardId=' + card.cardId + ']').draggable("destroy");
      return true;
    };

    ViewHelper.prototype.createFoundationDropPoints = function(newGame) {
      var fPile, self, targetElem, _i, _len, _ref;
      self = this;
      _ref = newGame.foundationPiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fPile = _ref[_i];
        targetElem = $('[data-foundation-id=' + fPile.foundationPileId + ']');
        targetElem.droppable({
          accept: ".card",
          drop: function(event, ui) {
            var attrVal, moved, pileFromId, returnVal, toPileId;
            attrVal = ui.draggable.attr('data-pile');
            toPileId = $(event.target).attr('data-foundation-id');
            switch (attrVal) {
              case 'discard-pile':
                moved = newGame.moveCradFromDiscardToFoundationPile(toPileId);
                if (!moved) {
                  ui.draggable.draggable('option', 'revert', true);
                  returnVal = true;
                } else {
                  newGame.checkIfGameWon();
                  $(ui.draggable).attr('data-pile', 'foundation-pile');
                  ui.draggable.removeAttr('style');
                  $('.discard').html(self.createDiscardPile(newGame.discardPiles));
                  $('.foundataions').html(self.createFoundationPiles(newGame.foundationPiles));
                  self.createFoundationDropPoints(newGame);
                  self.makeCardDraggable(newGame.discardPiles.currentPileCards);
                  returnVal = true;
                }
                break;
              case 'tableau-pile':
                pileFromId = $(ui.draggable).parent().attr('data-tableau-id');
                moved = newGame.moveCardFromTableauToFoundationPile(pileFromId, toPileId);
                if (!moved) {
                  ui.draggable.draggable('option', 'revert', true);
                  returnVal = true;
                } else {
                  newGame.checkIfGameWon();
                  $(ui.draggable).attr('data-pile', 'foundation-pile');
                  ui.draggable.removeAttr('style');
                  $('.tableauSection').html(self.createTableauPiles(newGame.tableauPiles));
                  $('.foundataions').html(self.createFoundationPiles(newGame.foundationPiles));
                  self.createFoundationDropPoints(newGame);
                  self.makeTableauPileCardsDraggable(newGame);
                  self.createTableauDropPoints(newGame);
                  returnVal = true;
                }
            }
            return returnVal;
          }
        });
      }
      return true;
    };

    ViewHelper.prototype.createTableauDropPoints = function(newGame) {
      var pileElem, self, tPile, targetElem, _i, _len, _ref;
      self = this;
      _ref = newGame.tableauPiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tPile = _ref[_i];
        pileElem = $('[data-tableau-id=' + tPile.tableauPileId + ']');
        targetElem = pileElem.find('.card:last');
        if (targetElem.length > 0) {
          targetElem = targetElem;
        } else {
          targetElem = pileElem;
        }
        targetElem.droppable({
          accept: ".card",
          drop: function(event, ui) {
            var attrVal, moved, pileFromId, returnVal, toPileId;
            attrVal = ui.draggable.attr('data-pile');
            if ($(event.target).attr('data-tableau-id')) {
              toPileId = $(event.target).attr('data-tableau-id');
            } else {
              toPileId = $(event.target).parent().attr('data-tableau-id');
            }
            returnVal = false;
            switch (attrVal) {
              case 'discard-pile':
                moved = newGame.moveCradFromDiscardToTableauPile(toPileId);
                if (!moved) {
                  ui.draggable.draggable('option', 'revert', true);
                  returnVal = false;
                } else {
                  $('.discard').html(self.createDiscardPile(newGame.discardPiles));
                  $('.tableauSection').html(self.createTableauPiles(newGame.tableauPiles));
                  self.makeCardDraggable(newGame.discardPiles.currentPileCards);
                  self.makeTableauPileCardsDraggable(newGame);
                  self.createTableauDropPoints(newGame);
                  returnVal = true;
                }
                break;
              case 'tableau-pile':
                pileFromId = $(ui.draggable).parent().attr('data-tableau-id');
                moved = newGame.moveCardToAnotherTableauPile(pileFromId, toPileId);
                if (!moved) {
                  ui.draggable.draggable('option', 'revert', true);
                  returnVal = false;
                } else {
                  $('.tableauSection').html(self.createTableauPiles(newGame.tableauPiles));
                  self.makeTableauPileCardsDraggable(newGame);
                  self.createTableauDropPoints(newGame);
                  returnVal = true;
                }
            }
            return returnVal;
          }
        });
      }
      return true;
    };

    return ViewHelper;

  })();

}).call(this);
